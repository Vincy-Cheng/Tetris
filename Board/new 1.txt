#include "stm32f10x.h"
#include <stdlib.h>
#include "IERG3810_LED.h"
#include "IERG3810_KEY.h"
#include "IERG3810_Buzzer.h"
#include "IERG3810_Clock.h"
#include "IERG3810_TFTLCD.h"
#include "IERG3810_GenBlock.h"
#include "Global.h"

//define color
#define BLACK 	0x0000
#define WHITE  	0xFFFF
#define BLUE 		0x001F
#define GREEN  	0x7E0
#define RED  		0xF800
#define YELLOW  0xFFE0//0x07FF
#define ORANGE	0xFBE0
#define PINK 		0xF81F

#define DS0_ON GPIOB ->BRR |= 1 << 5
#define DS0_OFF GPIOB ->BSRR |= 1 << 5
#define DS1_ON GPIOE ->BRR |= 1 << 5
#define DS1_OFF GPIOE ->BSRR |= 1 << 5
#define BUZZER_ON GPIOB ->BSRR = 1 << 8
#define BUZZER_OFF GPIOB ->BRR = 1 << 8

u32 ps2count;
u32 ps2key;
u32 sheep = 0;
u32 timeout;
u8 task1HeartBeat;
u8 task2HeartBeat;
u8 task3HeartBeat;
u8 task4HeartBeat;

int i=0;
int CUID1[10] = {49, 49, 53, 53, 49, 50, 55, 48, 50, 52}; //1155127024
int CUID2[10] = {49, 49, 53, 53, 49, 50, 53, 51, 49, 51}; //1155125313
int Name1[15] = {67, 104, 101, 117, 110, 103, 32, 70, 97, 105, 32, 84, 117, 110, 103}; //Cheung Fai Tung 
int Name2[14] = {67, 104, 101, 110, 103, 32, 87, 105, 110, 103, 32, 76, 97, 109}; //Cheng Wing Lam
int instruction1[86] = {89, 111, 117, 32, //You 
											99, 97, 110, 32,     //can 
											116, 119, 105, 115, 116, 32, //twist  
											97, 110, 100, 32, //and
											99, 104, 97, 110, 103, 101, 32,  //change
											116, 104, 101, 32, //the 
											115, 112, 101, 101, 100, 32, //speed
											111, 102, 32,  //of
											102, 97, 108, 108, 105, 110, 103, 32, //falling 
											98, 108, 111, 99, 107, 32,  //block
											98, 121, 32,  //by
											117, 115, 105, 110, 103, 32, //using
											116, 104, 101, 32, //the
											107, 101, 121, 98, 111, 97, 114, 100, 32, //keyboard
											50, 44, 52, 44, 54, 44, 56 //2, 4, 6, 8
};
int instruction2[19] = {80, 114, 101, 115, 115, 32, //Press
										107, 101, 121, //key
										49, 32, //1
										116, 111, 32, //to
										115, 116, 97, 114, 116 //start
};

int level[6]={76, 101, 118, 101, 108, 58};
int time[10]={84, 105, 109, 101, 32, 108, 101, 102, 116, 58};
int score[6]={83, 99, 111, 114, 101, 58 };

int second=180;
int start=0;
int minute =0;
int timer_stop;
int y_axis = 260;

int x_moving =0;
int x_previous;

int pressed = 0;
int twist_x[5] = {16, 16, 48, 16, 48}; //0-rectangle; 1,2-Tshape; 3,4-Lshape
int twist_y[5] = {64, 16, 16, 32, 16}; 

int blocknum;
int arrive;

void Delay(u32 count)
{
	u32 i;
	for (i=0; i<count; i++);
}

void IERG3810_NVIC_SetPriorityGroup(u8 prigroup)
{
	//Set PRIGROUP AIRCR[10:8]
	u32 temp, temp1;
	temp1 = prigroup & 0x00000007; //only concern 3 bits
	temp1 <<= 8; //'Why?'
	temp = SCB->AIRCR; //ARM DDI0337E page 8-22;
	temp &= 0x0000F8FF; //ARM DDI0337E page 8-22;
	temp |= 0x05FA0000; //ARM DDI0337E page 8-22;
	temp |= temp1;
	SCB->AIRCR=temp;
}

void IERG3810_PS2key_ExtiInit(void) //Initialize ps2 keyboard
{
	//PS2 (CLK)at PC11, EXTI-11, IRQ#40
	//PS2 (DATA)at PC10, EXTI-15_10,
	RCC->APB2ENR |= 1<<4;
	GPIOC->CRH &= 0XFFFF0FFF;
	GPIOC->CRH |= 0X00008000;
	GPIOC->ODR |= 1 << 2;
	RCC->APB2ENR|= 0x01;
	AFIO->EXTICR[2] &= 0xFFFF0FFF;
	AFIO->EXTICR[2] |= 0X00002000;
	EXTI->IMR |= 1 << 11;
	EXTI->FTSR |= 1<<11;//(RM0008 -page203)
	
	NVIC->IP[40] = 0x65;
	NVIC->ISER[1] |= (1<<8);
}

void EXTI15_10_IRQHandler(void)
{
	if (ps2count > 0 && ps2count < 9) {
				ps2key |= (GPIOC->IDR & 0x00000400) >> (10 - ps2count + 1);
		}
		ps2count ++;
		Delay(10);
		EXTI->PR = 1 << 11;
		// ps2key become like 0b000011100 something like that
}

void IERG3810_SYSTICK_Init10ms(void)
{
	//SYSTICK
	SysTick ->CTRL =0; //Clear Systick>CTRL setting // clear all the value
	SysTick ->LOAD =90000; //Refer to 0337E page 8-10 // cause we are using 10ms. 9MHz/10ms = 90000
	//CLKSOURCE = 0: STCLK (FCLK/8)
	//CLKSOURCE=1: FCLK
	//CLKSOURCE=0 is synchronized and better than CLKSOURCE=1
	//Refer to clock tree on page-93 of RM0008
	SysTick ->CTRL |= (1<<16 | 0x03); //Refer to 033E page8-8. // intialize enable & CLKSOURCE & TICKINT
}

void PrintStartPage(void)
{
	//Print T
	IERG3810_TFTLCD_FillRectangle(RED, 20, 40, 280,8);
	IERG3810_TFTLCD_FillRectangle(RED, 36, 8, 240,40);
	
	//print E
	IERG3810_TFTLCD_FillRectangle(ORANGE, 60, 40, 280,8);
	IERG3810_TFTLCD_FillRectangle(ORANGE, 60, 40, 260,8);
	IERG3810_TFTLCD_FillRectangle(ORANGE, 60, 40, 240,8);
	IERG3810_TFTLCD_FillRectangle(ORANGE, 60, 8, 240,40);
	
	//Print T
	IERG3810_TFTLCD_FillRectangle(YELLOW, 100, 40, 280,8);
	IERG3810_TFTLCD_FillRectangle(YELLOW, 116, 8, 240,40);
	
	//Print R
	IERG3810_TFTLCD_FillRectangle(GREEN, 140, 32, 280,8);
	IERG3810_TFTLCD_FillRectangle(GREEN, 140, 32, 260,8);
	IERG3810_TFTLCD_FillRectangle(GREEN, 140, 8, 240,40);
	IERG3810_TFTLCD_FillRectangle(GREEN, 164, 8, 260,20);
	IERG3810_TFTLCD_FillRectangle(GREEN, 156, 8, 250,10);
	IERG3810_TFTLCD_FillRectangle(GREEN, 164, 8, 240,10);
	
	//Print I
	IERG3810_TFTLCD_FillRectangle(BLUE, 180, 8, 240,48);
	
	//Print S
	IERG3810_TFTLCD_FillRectangle(BLACK, 200, 32, 280,8);
	IERG3810_TFTLCD_FillRectangle(BLACK, 200, 32, 260,8);
	IERG3810_TFTLCD_FillRectangle(BLACK, 200, 32, 240,8);
	IERG3810_TFTLCD_FillRectangle(BLACK, 200, 8, 260,20);
	IERG3810_TFTLCD_FillRectangle(BLACK, 224, 8, 240,20);
	
	for(i=0; i<15; i++) //Print Name1
	{
		IERG3810_TFTLCD_ShowChar(50+i*10, 150, Name1[i], BLACK, WHITE);
	}
		
	for(i =0 ;i<14; i++) //Print Name2
	{
		IERG3810_TFTLCD_ShowChar(50+i*10, 110, Name2[i], BLACK, WHITE);
	}
		
	for(i=0; i<10; i++) //Print CUID
	{
		IERG3810_TFTLCD_ShowChar(70+i*10, 170, CUID1[i], BLACK, WHITE);
		IERG3810_TFTLCD_ShowChar(70+i*10, 130, CUID2[i], BLACK, WHITE);
	}
}

void PrintInstruction(void)
{
		for(i=0;i<25; i++)
		{
			IERG3810_TFTLCD_ShowChar(0+i*10, 200, instruction1[i], RED, WHITE);
		}
		for(i=0; i<20; i++)
		{
			IERG3810_TFTLCD_ShowChar(20+i*10, 180, instruction1[25+i], RED, WHITE);
		}
		for(i=0; i<18; i++)
		{
			IERG3810_TFTLCD_ShowChar(30+i*10, 160, instruction1[46+i], RED, WHITE);
		}
		for(i=0; i<16; i++)
		{
			IERG3810_TFTLCD_ShowChar(31+i*10, 140, instruction1[65+i], RED, WHITE);
		}
		for(i=0; i<19; i++)
		{
			IERG3810_TFTLCD_ShowChar(25+i*10, 80, instruction2[i], BLACK, WHITE);
		}
}

void draw_Hline(u16 x, u16 y, u16 color,u16 length)
{
	for(i=0;i<length;i++)
	{
		IERG3810_TFTLCD_DrawDot(x+i,y,color);
	}
}

void draw_Vline(u16 x, u16 y, u16 color,u16 length)
{
	for(i=0;i<length;i++)
	{
		IERG3810_TFTLCD_DrawDot(x,y+i,color);
	}
}

void show_infomation(void)
{
			for(i=3;i>0;i--) // Exp 3.3
			{
				IERG3810_TFTLCD_FillRectangle(WHITE, 0, 240, 0, 360);
				IERG3810_TFTLCD_SevenSegment(RED, 93, 215, i);
				Delay(10000000);
			}
			IERG3810_TFTLCD_FillRectangle(WHITE, 0, 240, 0, 320);
			IERG3810_TFTLCD_FillRectangle(BLACK, 10, 160, 20, 260);
			for(i=0;i<6;i++)
			{
				IERG3810_TFTLCD_ShowChar(175+i*10, 260, level[i], BLACK, WHITE);
			}
			for(i=0;i<5;i++)
			{
					IERG3810_TFTLCD_ShowChar(175+i*10, 220, time[i], BLACK, WHITE);
			}
			for(i=5;i<10;i++)
			{
					IERG3810_TFTLCD_ShowChar(175+(i-5)*10, 200, time[i], BLACK, WHITE);
			}
			for(i=0;i<6;i++)
			{
				IERG3810_TFTLCD_ShowChar(175+i*10, 160, score[i], BLACK, WHITE);
			}
			IERG3810_TFTLCD_ShowChar(195, 180, 58, BLACK, WHITE);
			draw_Hline(10,260,BLUE,160);
			start =1;
			second = 180;
}

void Print_Time(int sec) {
	if(timer_stop == 0)
	{
		int min = sec / 60;
		int tens = sec % 60 / 10; //represent tens digit
		int unit = sec % 60 % 10; //represent tens digit

		IERG3810_TFTLCD_FillRectangle(WHITE, 185, 10, 180, 10);
		IERG3810_TFTLCD_ShowChar(180, 180, 48+min, BLACK, WHITE); //print(min)
	
		IERG3810_TFTLCD_FillRectangle(WHITE, 205, 20, 180, 10); //print second
	
		IERG3810_TFTLCD_ShowChar(205, 180, 48+tens, BLACK, WHITE);
		IERG3810_TFTLCD_ShowChar(215, 180, 48+unit, BLACK, WHITE);
	}
	else
	{
		IERG3810_TFTLCD_FillRectangle(WHITE, 185, 10, 180, 10);
		IERG3810_TFTLCD_ShowChar(180, 180, 48, BLACK, WHITE); //print(min)
		IERG3810_TFTLCD_FillRectangle(WHITE, 205, 20, 180, 10); //print second
		IERG3810_TFTLCD_ShowChar(205, 180, 48, BLACK, WHITE);
		IERG3810_TFTLCD_ShowChar(215, 180, 48, BLACK, WHITE);
	}		
}

void GenBlock(void)
{
		if (blocknum ==0)
		{
			if(task2HeartBeat >= 100)
			{
				if(y_axis > 16)
				{					
					IERG3810_TFTLCD_FillRectangle(RED, 90+x_moving, 16, y_axis, 16);
					x_previous = 90+ x_moving;
					if(y_axis < 248)
					{
						IERG3810_TFTLCD_FillRectangle(BLACK, 90+x_moving, 16, y_axis+16, 16);
					}
					draw_Hline(10,260,BLUE,160);
				}
				else
				{
					arrive = 1;
				}
				task2HeartBeat = 0;
				y_axis -= 16;
			}
		}
		else if (blocknum ==1 )
		{
			if(task2HeartBeat >= 100)
			{
				if(y_axis > 16)
				{					
					IERG3810_TFTLCD_FillRectangle(YELLOW, 90+x_moving, twist_x[0], y_axis, twist_y[0]);
					IERG3810_TFTLCD_FillRectangle(WHITE, 10, 160, 280, 64);
					x_previous = 90+ x_moving;
					if(y_axis < 248)
					{
						IERG3810_TFTLCD_FillRectangle(BLACK, 90+x_moving, twist_x[0], y_axis+twist_y[0], twist_y[0]);
						IERG3810_TFTLCD_FillRectangle(WHITE, 10, 160, 280, 64);
					}
					draw_Hline(10,260,BLUE,160);
				}
				else
				{
					arrive = 1;
				}
				task2HeartBeat = 0;
				y_axis -= 16;
			}
		}
		else if (blocknum == 2)
		{
			if(task2HeartBeat >= 100)
			{
				if(y_axis > 16)
				{
					if(y_axis < 248)
					{
						IERG3810_TFTLCD_FillRectangle(BLACK, 90+x_moving, twist_x[1], y_axis+32, twist_y[1]);
						IERG3810_TFTLCD_FillRectangle(BLACK, 74+x_moving, twist_x[2], y_axis+16, twist_y[2]);
						IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);
					}
					IERG3810_TFTLCD_FillRectangle(GREEN, 90+x_moving, twist_x[1], y_axis+16, twist_y[1]);
					IERG3810_TFTLCD_FillRectangle(GREEN, 74+x_moving, twist_x[2], y_axis, twist_y[2]);
					IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);
					x_previous = 74 + x_moving;
					draw_Hline(10, 260, BLUE, 160);
				}
				else 
				{
					arrive = 1;
				}
				task2HeartBeat = 0;
				y_axis -= 16;
			}
		}
		else if (blocknum == 3)
		{
			if(task2HeartBeat >= 100)
			{
				if(y_axis > 16)
				{
					if(y_axis < 248)
					{
						IERG3810_TFTLCD_FillRectangle(BLACK, 74+x_moving, twist_x[3], y_axis+32, twist_y[3]);
						IERG3810_TFTLCD_FillRectangle(BLACK, 74+x_moving, twist_x[4], y_axis+16, twist_y[4]);
						IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);
					}
					IERG3810_TFTLCD_FillRectangle(PINK, 74+x_moving, twist_x[3], y_axis, twist_y[3]);
					IERG3810_TFTLCD_FillRectangle(PINK, 74+x_moving, twist_x[4], y_axis, twist_y[4]);
					IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);
					x_previous = 74 + x_moving;
					draw_Hline(10, 260, BLUE, 160);
				}
				else 
				{
					arrive = 1;
				}
				task2HeartBeat = 0;
				y_axis -= 16;
			}
		}
		start = 1;
}

void CoverPreviousBlock(void)
{
	if (blocknum == 0) // small square
	{
		IERG3810_TFTLCD_FillRectangle(BLACK, x_previous, 16, y_axis+16, 16);
	}
	else if (blocknum == 1) // long rectangle
	{
		IERG3810_TFTLCD_FillRectangle(BLACK, x_previous, twist_x[0], y_axis+twist_y[0], twist_y[0]);
		IERG3810_TFTLCD_FillRectangle(WHITE, 10, 160, 280, 64);
	}
	else if (blocknum == 2)
	{
			IERG3810_TFTLCD_FillRectangle(BLACK, 90+x_moving, twist_x[1], y_axis+32, twist_y[1]);
			IERG3810_TFTLCD_FillRectangle(BLACK, x_previous, twist_x[2], y_axis+16, twist_y[2]);
			IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);	
	}
	else if (blocknum == 3)
	{
			IERG3810_TFTLCD_FillRectangle(BLACK, 74+x_moving, twist_x[3], y_axis+32, twist_y[3]);
			IERG3810_TFTLCD_FillRectangle(BLACK, 74+x_moving, twist_x[4], y_axis+16, twist_y[4]);
			IERG3810_TFTLCD_FillRectangle(WHITE, 10 , 160, 280, 64);
	}
}

void TwistBlock(void)
{
	int tmp;
	if(blocknum == 0)
	{
		;//do nothing
	}
	else if(blocknum == 1)
	{
		tmp = twist_x[0];
		twist_x[0] = twist_y[0];
		twist_y[0] = tmp;
	}
	else if(blocknum == 2)
	{
		if(pressed % 4 == 0)
		{
			;
		}
		else if(pressed % 4 == 1)
		{
			;
		}
		else if(pressed % 4 == 2)
		{
			;
		}
		else if(pressed % 4 == 3)
		{
			;
		}
	}
	else if(blocknum == 3)
	{
		if(pressed % 4 == 0)
		{
			;
		}
		else if(pressed % 4 == 1)
		{
			;
		}
		else if(pressed % 4 == 2)
		{
			;
		}
		else if(pressed % 4 == 3)
		{
			;
		}
	}
}


int main (void)
{
	IERG3810_clock_tree_init();
	IERG3810_KEY_Init();	
	IERG3810_LED_Init();
	IERG3810_Buzzer_Init();
	IERG3810_NVIC_SetPriorityGroup(5);
	IERG3810_PS2key_ExtiInit();
	IERG3810_TFTLCD_Init();
	IERG3810_SYSTICK_Init10ms();

	DS0_OFF;
	DS1_OFF;
	
	IERG3810_TFTLCD_FillRectangle(WHITE, 0, 240, 0, 320);
	IERG3810_TFTLCD_FillRectangle(WHITE, 0, 240, 0, 320);
	
	PrintStartPage();
	Delay(30000000);
	IERG3810_TFTLCD_FillRectangle(WHITE, 0, 240, 0, 320);
	PrintInstruction();
	
	blocknum = rand()%3;
	//blocknum = 3;
	
	while(1)
	{
		if(!(GPIOE ->IDR & GPIO_Pin_3)) //keyup
		{
			show_infomation();
		}
		if(second <= 0)
		{
			timer_stop = 1;
		}
		if(task1HeartBeat >= 100)
			{
				task1HeartBeat = 0;
				second--;
			}
		if(start == 1)
		{
			Print_Time(second);
			GenBlock();
			if(arrive == 1)
			{
				
				y_axis = 260;
				arrive = 0;
				x_moving = 0;
				blocknum = rand()% 3;
			}
		}
				
		sheep++;
		if(ps2count >=11)
		{
			if(ps2key == 0x5A)
			{
				;//DS0_ON;
			}
			if(ps2key == 0x72) //num2 in keyboard
			{
				;
			}
			if(ps2key == 0x6B) //num4 in keyboard
			{
				if(blocknum == 0 || blocknum == 1)
				{
					if(90+x_moving>10 && y_axis >=36)
					{
						CoverPreviousBlock();
						x_moving-=16;
					}
				}
				else 
				{
						if(74+x_moving>10 && y_axis >=36)
					{
						CoverPreviousBlock();
						x_moving-=16;
					}
				}
			}
			if(ps2key == 0x74) //num6 in keyboard
			{
				if(blocknum == 0 || blocknum == 1)
				{
					if(90+x_moving<154 && y_axis >=36)
					{
						CoverPreviousBlock();
						x_moving+=16;
					}
				}
				else 
				{
						if(74+x_moving<122 && y_axis >=36)
					{
						CoverPreviousBlock();
						x_moving+=16;
					}
				}
			}
			if(ps2key == 0x75) //num8 in keyboard 
			{
				pressed++;
				TwistBlock();
				 //using if-else statement to twist and change the x, y coordinates which will be done in the genblock function 
			}
			ps2key=0;
			ps2count = 0;
			EXTI->PR = 1<<11;
		}
		timeout--;
		
		if(timeout == 0) 
		{
			timeout = 20000;
			ps2key = 0;
			ps2count = 0;
		} 
	}		
}
